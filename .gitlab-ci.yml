stages:
  - test
  - build


# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
services:
  - name: mysql:8.0
    command: ["--default-authentication-plugin=mysql_native_password"]
variables:
  MYSQL_DATABASE: homestead
  MYSQL_ROOT_PASSWORD: secret
  MYSQL_USER: homestead
  MYSQL_PASSWORD: secret

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
cache:
  paths:
    - vendor/
    - node_modules/

# This is a basic example for a gem or script which doesn't use
# services such as redis or postgres
before_script:
  # Update packages
  - apt-get update -yqq

  # Install dependencies
  - apt-get install -y git gnupg2

  # Copy over testing configuration.
  # Don't forget to set the database config in .env.testing correctly
  # DB_HOST=mysql
  # DB_DATABASE=project_name
  # DB_USERNAME=root
  # DB_PASSWORD=secret
  - cp .env.gitlab .env

  # Install Composer and project dependencies.
  # - curl -sS https://getcomposer.org/installer | php
  - composer install

  # If you need Node.js
  #- curl -sL https://deb.nodesource.com/setup_8.x | bash -
  #- apt-get install -y nodejs
  #- npm install
  #- npm run dev

  # Generate an application key. Re-cache.
  - php artisan key:generate
  - php artisan cache:clear
  - php artisan view:clear
  - php artisan route:clear
  - php artisan clear-compiled
  - php artisan config:cache

  # Run database migrations.
  - php artisan migrate:fresh

  # Run database seed
  - php artisan db:seed

  # Output php version and memory limit
  - php --version
  - php -i | grep memory_limit

test:
  image: uogsoe/soe-php-apache:7.2-ci
  script:
    - apt-get update -yqq
    - apt-get install -y git gnupg2
    - cp .env.gitlab .env
    - composer install
    # If you need Node.js
    #- curl -sL https://deb.nodesource.com/setup_8.x | bash -
    #- apt-get install -y nodejs
    #- npm install
    #- npm run dev
    - php artisan key:generate
    - php artisan cache:clear
    - php artisan view:clear
    - php artisan route:clear
    - php artisan clear-compiled
    - php artisan config:cache
    - php artisan migrate:fresh
    - php artisan db:seed
    - php --version
    - php -i | grep memory_limit
    - php vendor/bin/phpunit -d memory_limit=1024M --stop-on-failure --coverage-text --colors=never
    # run frontend tests
    # if you have any task for testing frontend
    # set it in your package.json script
    # comment this out if you don't have a frontend test
    # - npm test

build-staging:
  stage: build
  image: docker:stable
  script:
  - cp docker/staging.Dockerfile ./Dockerfile
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  - docker build -t $CI_REGISTRY/$CI_PROJECT_PATH:staging .
  - docker push $CI_REGISTRY/$CI_PROJECT_PATH:staging

build-production:
  stage: build
  image: docker:stable
  only:
  - master
  script:
  - cp docker/production.Dockerfile ./Dockerfile
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  - docker build -t $CI_REGISTRY/$CI_PROJECT_PATH .
  - docker build -t $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_SHA .
  - docker push $CI_REGISTRY/$CI_PROJECT_PATH
  - docker push $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_SHA

  deploy-staging:
    stage: deploy
    when: manual